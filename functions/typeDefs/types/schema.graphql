scalar Date

enum ProgrammingLanguage {
  cpp
  python
  java
  javascript
  go
  rust
}

enum School {
  IPN
  UNAM
  CIMAT
  NONLISTED
}

enum Company {
  Amazon
  Facebook
  Github
  Google
  Microsoft
  Netflix
  Twitter
}

enum CompanyRole {
  Intern
  Explore
  STEP
  FTE
}

enum TypeOfInterview {
  se # Software Engineer
  ml # Machine Learning
  re # Reliability Engineering
  ds # Data science
}

enum Role {
  root
  interviewee
  interviewer
}

enum Score {
  no_hire
  undetermined
  hire
  strongly_hire
}

## Inputs are for receiving information from the client

input IntervieweeInput {
  school: School
  resumeLink: String # TODO: See how we're going to upload the resume
}

input InterviewerInput {
  isMentioned: Boolean
  description: String
}

input PoolInput {
  intervieweeUid: String!
  priority: Int! # TODO: Create the algorithm to create the score
  programmingLanguage: [ProgrammingLanguage]!
  roleApplyingTo: CompanyRole
  typesOfInterview: TypeOfInterview!
  companiesApplyingTo: [Company]!
  numberOfInterviews: Int!
  # TODO: See how we're going to deal with the ranges
  # TODO: Erase the range when an interview is scheduled to avoid problems
  availability: [Date]!
}

input InterviewInput {
  intervieweeUid: String!
  interviewerUid: String!
  date: Date!
}

## Types are for querying the information

type User {
  uid: String!
  email: String!
  name: String!
  role: [Role!]!
}

# TODO: See if it is necessary to join user with interviewee and interviewer
type Interviewee {
  uid: String!
  school: School
  companiesApplyingTo: [Company]!
}

type Interviewer {
  uid: String!
  isMentioned: Boolean
  description: String
}

type Interview {
  intervieweeUid_date: String!
  interviewerUid_date: String!
  date: Date!
  confirmed: Boolean!
  doc: String
  room: String
  score: Score
}
