scalar Date

enum Company {
  Amazon
  Facebook
  Github
  Google
  Microsoft
  Netflix
  Twitter
}

enum CompanyRole {
  Intern
  Explore
  STEP
  FTE
}

enum ProgrammingLanguage {
  cpp
  python
  java
  javascript
  go
  rust
}

enum Role {
  root
  interviewee
  interviewer
}

enum School {
  IPN
  UNAM
  CIMAT
  NONLISTED
}

enum Score {
  no_hire
  undetermined
  hire
  strongly_hire
}

enum TypeOfInterview {
  se # Software Engineer
  ml # Machine Learning
  re # Reliability Engineering
  ds # Data science
}

## Inputs are for receiving information from the clients

input IntervieweeInput {
  school: School!
  resume: Upload!
}

input IntervieweeUpdateInput {
  school: School
  resume: Upload
}

input InterviewerInput {
  isMentioned: Boolean
  description: String
}

input IntervalInput {
  day: String!
  interval: [String!]!
}

input PoolInput {
  companies: [Company]!
  availability: [IntervalInput]!
  language: [ProgrammingLanguage]!
  pending: Int!
  role: CompanyRole
  type: TypeOfInterview!
  # TODO: Erase the range when an interview is scheduled to avoid problems
}

input InterviewInput {
  intervieweeUid: String!
  interviewerUid: String!
  date: Date!
}

input ConfirmationInput {
  interviewUid: String!
  intervieweeUid: String!
  interviewDate: String!
}

input CancellationInput {
  interviewUid: String!
  interviewerUid: String!
  interviewDate: String!
}

## Types are for querying the information
type UserType {
  role: Role!
  firstTime: Boolean!
}

type User {
  uid: String!
  email: String!
  name: String!
  role: [Role!]!
}

type Interval {
  day: String!
  interval: [String!]!
}

type Pool {
  uid: String!
  type: TypeOfInterview!
  role: CompanyRole!
  priority: Int!
  language: [ProgrammingLanguage]!
  companies: [Company]!
  availability: [Interval]!
}

# TODO: See if it is necessary to join user with interviewee and interviewer
type Interviewee {
  uid: String!
  school: School
  companiesApplyingTo: [Company]!
}

type Interviewer {
  uid: String!
  isMentioned: Boolean
  description: String
}

type Interview {
  uid: String!
  intervieweeUid_date: String!
  interviewerUid_date: String!
  date: Date!
  confirmed: Boolean!
  doc: String
  room: String
  score: Score
}
